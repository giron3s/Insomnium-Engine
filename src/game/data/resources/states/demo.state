--
-- Author    : giron3s       
-- Copyright : Copyright (C) 2020 Marc Girones Dezsenyi - All Rights Reserved
--             Unauthorized copying of this file, via any medium is strictly prohibited
--             Proprietary and confidential 
--


-- GLOBAL VARIABLES
Engine = GetEngine()
StateMachine = Engine:StateMachine()
Display = Engine:Display()
AppManager = GetAppManager()
ObjectEditorManager = GetObjectEditorManager()
FTUEManager = GetFTUEManager()
UserConfig = GetUserConfig()
ThemeManager = GetThemeManager()

-- STATE definitions 
StateMachine:AddState("WELCOME", { "Start", "Exit", "SignUp", "Login", "ForgotPassword", "StayLoggedIn" }, {"data/resources/ui/Welcome.ui"} )
StateMachine:AddState("MAIN", { "Start", "Exit", "QuitApp", "NewProject", "LoadProject", "SaveProject", "DeleteSceneItems", "OnChangedSceneSelection", "SetProjectSaved", "SetProjectUnsaved", "ToggleSceneCamera", "ZoomInSceneCamera", "ZoomOutSceneCamera", "GotoSettings", "GotoObjectEditor", "GotoAddScene", "GotoRemoveScene", "GotoFTUE", "ToggleCatalogView", "GotoThemeBuilder"}, {"data/resources/ui/main.ui"} )
StateMachine:AddState("SETTINGS", { "Start", "Exit", "SettingsSave", "SettingsCancel" }, {"data/resources/ui/main.ui", "data/resources/ui/settings.ui"})
StateMachine:AddState("OBJECTEDITOR", { "Start", "Exit", "SaveObjectEditor", "CancelObjectEditor", "OnTextChanged" }, {"data/resources/ui/main.ui", "data/resources/ui/ObjectEditor.ui"})
StateMachine:AddState("OBJECTEDITORCANCEL", { "Start", "Exit", "CancelObjectEditorYes", "CancelObjectEditorNo" }, {"data/resources/ui/main.ui", "data/resources/ui/ObjectEditor.ui", "data/resources/ui/ObjectEditorCancel.ui"})
StateMachine:AddState("ADDSCENE", { "Start", "Exit", "AddSceneCreate", "AddSceneCancel" }, {"data/resources/ui/main.ui", "data/resources/ui/AddScene.ui"})
StateMachine:AddState("REMOVESCENE", { "Start", "Exit", "RemoveSceneYes", "RemoveSceneNo" }, {"data/resources/ui/main.ui", "data/resources/ui/RemoveScene.ui"})
StateMachine:AddState("NEWPROJECT", { "Start", "Exit", "NewProjectCreate", "NewProjectCancel" }, {"data/resources/ui/main.ui", "data/resources/ui/NewProject.ui"})
StateMachine:AddState("FTUE", { "Start", "Exit", "FTUENext", "FTUEPrev", "FTUEDontShowNexTime", "FTUEClose", "FTUEGotoPage0", "FTUEGotoPage1", "FTUEGotoPage2", "FTUEGotoPage3", "FTUEGotoPage4" }, {"data/resources/ui/main.ui", "data/resources/ui/FTUE.ui"})
StateMachine:AddState("THEMEBUILDER", { "Start", "Exit", "SaveTheme", "LoadTheme", "CancelTheme", "OnColorPicked", "OnTextChanged", "CloseThemeBuilder", "DropShadow", "Transparent", "BorderDark", "BorderLight", "BorderMedium", "ButtonGradientTopFocused", "ButtonGradientTopUnfocused", "ButtonGradientBottomFocused", "ButtonGradientBottomUnfocused", "ButtonGradientTopPushed", "ButtonGradientBottomPushed", "WindowFillFocused", "WindowFillUnfocused", "WindowTitleFocused", "WindowTitleUnfocused", "WindowHeaderGradientTop", "WindowHeaderGradientBottom", "WindowHeaderSepTop", "WindowHeaderSepBottom", "Text", "TextDisabled", "TextShadow", "Icon", "WindowPopup", "WindowPopupTransparent", "LabelFont", "ButtonFont", "HeadingFont", "TextboxFont", "TabHeadingFont" }, {"data/resources/ui/main.ui", "data/resources/ui/themeBuilder.ui"})

function INIT()
	if UserConfig:GetLoggedIn() == true then
		StateMachine:ChangeState("MAIN")
	else
		StateMachine:ChangeState("WELCOME")
	end
end

function WELCOME_Start()
    print("MAIN_Start")
end

function WELCOME_Exit()
    print("MAIN_Exit")
end

function WELCOME_SignUp()
	print("WELCOME Sign up")
end

function WELCOME_Login()
	print("WELCOME Login")
	UserConfig:SetLoggedIn(Display:GetUICheckBox("btnStayLoggedIn"):GetIsChecked())
	if AppManager:CheckLogin(Display:GetUITextBox("WelcomeUsername"):GetText(), Display:GetUITextBox("WelcomePassword"):GetText()) == true then
		if FTUEManager:ShouldFTUEShow() == true then
			StateMachine:ChangeState("FTUE")
		else
			StateMachine:ChangeState("MAIN")
		end
	else
		Display:GetUIButton("WelcomeMessage"):SetCaption("@LOGIN_INCORRECT")
	end
end

function WELCOME_ForgotPassword()
	print("WELCOME forgot password")
end

function WELCOME_StayLoggedIn()
	print("WELCOME Stay logged-in")
end


function MAIN_Start()
    print("State:MAIN , Action:Start")
end

function MAIN_Exit()
    print("MAIN_Exit")
end

function MAIN_QuitApp()
    AppManager:QuitApp()
end

function MAIN_NewProject()
    StateMachine:ChangeState("NEWPROJECT")
end

function MAIN_LoadProject()
    AppManager:LoadProject()
end

function MAIN_SaveProject()
   AppManager:SaveProject()
end

function MAIN_SetProjectSaved()
   AppManager:SetProjectSaved()
end

function MAIN_SetProjectUnsaved()
   AppManager:SetProjectUnsaved()
end

function MAIN_DeleteSceneItems()
   AppManager:DeleteSceneItems()
end

function MAIN_OnChangedSceneSelection()
   AppManager:OnChangedSceneSelection()
end

function MAIN_ToggleSceneCamera()
    AppManager:ToggleSceneCamera()
end

function MAIN_ZoomInSceneCamera()
    AppManager:ZoomSceneCamera(10)
end

function MAIN_ZoomOutSceneCamera()
    AppManager:ZoomSceneCamera(-10)
end

function MAIN_GotoSettings()
    StateMachine:ChangeState("SETTINGS")
end

function MAIN_GotoThemeBuilder()
    StateMachine:ChangeState("THEMEBUILDER")
end

function MAIN_GotoObjectEditor(aEntityId)
    StateMachine:ChangeState("OBJECTEDITOR")
	ObjectEditorManager:LoadObjectProperties(aEntityId)
end

function MAIN_GotoAddScene()
    StateMachine:ChangeState("ADDSCENE")
end

function MAIN_GotoRemoveScene(aSceneToRemove)
	AppManager:SetSceneToRemove(aSceneToRemove)
    StateMachine:ChangeState("REMOVESCENE")
end

function MAIN_GotoFTUE()
    StateMachine:ChangeState("FTUE")
end


function MAIN_ToggleCatalogView()
	AppManager:ToggleCatalogView()
end

function SETTINGS_Start()
    print("SETTINGS_Start")
	
    logLevel = UserConfig:GetLogLevel()
	if logLevel == 0 then
		Display:GetUIComboBox("ComboLogLevel"):SetSelectedValue("LEVEL 1")
	end
	if logLevel == 1 then
		Display:GetUIComboBox("ComboLogLevel"):SetSelectedValue("LEVEL 2")
	end
	if logLevel == 2 then
		Display:GetUIComboBox("ComboLogLevel"):SetSelectedValue("LEVEL 3")
	end
	
	autoSaveEnabled = UserConfig:GetAutosaveEnabled()
	if autoSaveEnabled == true then
		Display:GetUIComboBox("ComboAutosaveEnable"):SetSelectedValue("YES")
	end
	if autoSaveEnabled == false then
		Display:GetUIComboBox("ComboAutosaveEnable"):SetSelectedValue("NO")
	end

	autoSaveTime = UserConfig:GetAutosaveTime()
	if autoSaveTime == 60 then
		Display:GetUIComboBox("ComboAutosaveInterval"):SetSelectedValue("1 MINUTE")
	end
	if autoSaveTime == 180 then
		Display:GetUIComboBox("ComboAutosaveInterval"):SetSelectedValue("3 MINUTES")
	end
	if autoSaveTime == 300 then
		Display:GetUIComboBox("ComboAutosaveInterval"):SetSelectedValue("5 MINUTES")
	end
	if autoSaveTime == 600 then
		Display:GetUIComboBox("ComboAutosaveInterval"):SetSelectedValue("10 MINUTES")
	end
	
	language = UserConfig:GetLanguage(languageString)
	if language == "DEFAULT" then
		language = "ENGLISH"
	end
	
	Display:GetUIComboBox("ComboLanguage"):SetSelectedValue(language)
	AppManager:DisplayLog()
end

function SETTINGS_SettingsSave()
    print("State:SETTINGS , Action:SettingsSave")
	
	logLevelString = Display:GetUIComboBox("ComboLogLevel"):GetSelectedValue()
	logLevel = 0
	if logLevelString == "LEVEL 2" then
		logLevel = 1
	end
	if logLevelString == "LEVEL 3" then
		logLevel = 2
    end
	UserConfig:SetLogLevel(logLevel)
	
	autoSaveEnableString = Display:GetUIComboBox("ComboAutosaveEnable"):GetSelectedValue()
	autoSaveEnable = true
	if autoSaveEnableString == "NO" then
		autoSaveEnable = false
	end
	UserConfig:SetAutosaveEnabled(autoSaveEnable)
	
	autoSaveTimeString = Display:GetUIComboBox("ComboAutosaveInterval"):GetSelectedValue()
	autoTime = 60
	if autoSaveTimeString == "1 MINUTE" then
		autoTime = 60
	end
	if autoSaveTimeString == "3 MINUTES" then
		autoTime = 180
	end
	if autoSaveTimeString == "5 MINUTES" then
		autoTime = 300
	end
	if autoSaveTimeString == "10 MINUTES" then
		autoTime = 600
	end
	UserConfig:SetAutosaveTime(autoTime)
	
	languageString = Display:GetUIComboBox("ComboLanguage"):GetSelectedValue()
	if languageString == "ENGLISH" then
		languageString = "DEFAULT"
	end
	UserConfig:SetLanguage(languageString)
	
	AppManager:ApplyUserConfig()
    StateMachine:ChangeState("MAIN")
end

function SETTINGS_SettingsCancel()
	StateMachine:ChangeState("MAIN")
end

function SETTINGS_Exit()
   print("SETTINGS_Exit")
end

function OBJECTEDITOR_Start()
   print("OBJECTEDITOR_Start")
   
   Display:GetUITextBox("inpObjName"):SetText(ObjectEditorManager:GetObjectName())
   Display:GetUITextBox("inpObjType"):SetText(ObjectEditorManager:GetObjectType())
   Display:GetUIImageView("imgObjImage"):SetImage(ObjectEditorManager:GetObjectImage())
   
   Display:GetUITextBox("inpObjWidth"):SetText(ObjectEditorManager:GetObjectScaleX())
   Display:GetUITextBox("inpObjHeight"):SetText(ObjectEditorManager:GetObjectScaleY())
   Display:GetUITextBox("inpObjDepth"):SetText(ObjectEditorManager:GetObjectScaleZ())
   
   Display:GetUITextBox("inpObjElevation"):SetText(ObjectEditorManager:GetObjectPositionY())
   Display:GetUITextBox("inpObjRotation"):SetText(ObjectEditorManager:GetObjectOrientationY())
   
end

function OBJECTEDITOR_SaveObjectEditor()

    ObjectEditorManager:SetObjectName(Display:GetUITextBox("inpObjName"):GetText())
	ObjectEditorManager:SetObjectType(Display:GetUITextBox("inpObjType"):GetText())
	
	ObjectEditorManager:SetObjectScaleX(Display:GetUITextBox("inpObjWidth"):GetText())
	ObjectEditorManager:SetObjectScaleY(Display:GetUITextBox("inpObjHeight"):GetText())
	ObjectEditorManager:SetObjectScaleZ(Display:GetUITextBox("inpObjDepth"):GetText())
	
	ObjectEditorManager:SetObjectPositionY(Display:GetUITextBox("inpObjElevation"):GetText())
	ObjectEditorManager:SetObjectOrientationY(Display:GetUITextBox("inpObjRotation"):GetText())
	
	StateMachine:ChangeState("MAIN")
end

function OBJECTEDITOR_CancelObjectEditor()
    if ObjectEditorManager:HaveValuesChanged() == true then
        StateMachine:ChangeState("OBJECTEDITORCANCEL")
    else
	    StateMachine:ChangeState("MAIN")
    end
end

function OBJECTEDITOR_OnTextChanged()
    ObjectEditorManager:SetObjectName(Display:GetUITextBox("inpObjName"):GetText())
	ObjectEditorManager:SetObjectType(Display:GetUITextBox("inpObjType"):GetText())
	
	ObjectEditorManager:SetObjectScaleX(Display:GetUITextBox("inpObjWidth"):GetText())
	ObjectEditorManager:SetObjectScaleY(Display:GetUITextBox("inpObjHeight"):GetText())
	ObjectEditorManager:SetObjectScaleZ(Display:GetUITextBox("inpObjDepth"):GetText())
	
	ObjectEditorManager:SetObjectPositionY(Display:GetUITextBox("inpObjElevation"):GetText())
	ObjectEditorManager:SetObjectOrientationY(Display:GetUITextBox("inpObjRotation"):GetText())
end

function OBJECTEDITOR_Exit()
   print("OBJECTEDITOR_Exit")
   ObjectEditorManager:UnloadObjectProperties()
end

function OBJECTEDITORCANCEL_Start()
   print("OBJECTEDITORCANCEL_Start")
end

function OBJECTEDITORCANCEL_CancelObjectEditorYes()
    ObjectEditorManager:UndoValuesChanged()
	ObjectEditorManager:UnloadObjectProperties()
	StateMachine:ChangeState("MAIN")
end

function OBJECTEDITORCANCEL_CancelObjectEditorNo()
    StateMachine:ChangeState("OBJECTEDITOR")
end

function OBJECTEDITORCANCEL_Exit()
   print("OBJECTEDITORCANCEL_Exit")
end

function ADDSCENE_Start()
   print("ADDSCENE_Start")
end

function ADDSCENE_AddSceneCreate()
	ret = AppManager:AddScene(Display:GetUITextBox("inpSceneName"):GetText())

	if ret == "Success" then
		StateMachine:ChangeState("MAIN")
	else
		Display:GetUILabel("txtSceneName"):SetCaption(ret, true)
    end
end

function ADDSCENE_AddSceneCancel()
    StateMachine:ChangeState("MAIN")
end

function ADDSCENE_Exit()
   print("ADDSCENE_Exit")
end


function REMOVESCENE_Start()
   print("REMOVESCENE_Start")
   Display:GetUILabel("txtSceneName"):SetCaption(AppManager:GetSceneToRemove(), false)
end

function REMOVESCENE_RemoveSceneYes()
    AppManager:RemoveScene(AppManager:GetSceneToRemove())
	StateMachine:ChangeState("MAIN")
end

function REMOVESCENE_RemoveSceneNo()
    StateMachine:ChangeState("MAIN")
end

function REMOVESCENE_Exit()
   print("REMOVESCENE_Exit")
end


function NEWPROJECT_Start()
   print("NEWPROJECT_Start")
end

function NEWPROJECT_NewProjectCreate()
	ret = AppManager:NewProject(Display:GetUITextBox("inpProjectName"):GetText())

	if ret == "Success" then
		StateMachine:ChangeState("MAIN")
	else
		Display:GetUILabel("txtProjectName"):SetCaption(ret, true)
    end
end

function NEWPROJECT_NewProjectCancel()
    StateMachine:ChangeState("MAIN")
end

function NEWPROJECT_Exit()
   print("NEWPROJECT_Exit")
end


function FTUE_Start()
   print("FTUE_Start")
   FTUEManager:SetTheme()
   FTUEManager:SetCurrentPage(0)
end

function FTUE_FTUENext()
    FTUEManager:NextPage()
end

function FTUE_FTUEPrev()
	FTUEManager:PrevPage()
end

function FTUE_FTUEGotoPage0()
	FTUEManager:SetCurrentPage(0)
end

function FTUE_FTUEGotoPage1()
	FTUEManager:SetCurrentPage(1)
end

function FTUE_FTUEGotoPage2()
	FTUEManager:SetCurrentPage(2)
end

function FTUE_FTUEGotoPage3()
	FTUEManager:SetCurrentPage(3)
end

function FTUE_FTUEGotoPage4()
	FTUEManager:SetCurrentPage(4)
end

function FTUE_FTUEDontShowNexTime()
    FTUEManager:ToggleDontShowNextTime()
end

function FTUE_FTUEClose()
	FTUEManager:SaveFTUEPrefs()
    StateMachine:ChangeState("MAIN")
end

function FTUE_Exit()
   print("FTUE_Exit")
end

function THEMEBUILDER_Start()
   print("THEMEBUILDER_Start")
   ThemeManager:ApplyTheme()
end

function THEMEBUILDER_CloseThemeBuilder()
	StateMachine:ChangeState("MAIN")
end

function THEMEBUILDER_OnTextChanged()
	ThemeManager:SelectElement("StandardFontSize")
	ThemeManager:SetValue(Display:GetUITextBox("StandardFontSizeValue"):GetText())
	
	ThemeManager:SelectElement("ButtonFontSize")
	ThemeManager:SetValue(Display:GetUITextBox("ButtonFontSizeValue"):GetText())
	
	ThemeManager:SelectElement("TextBoxFontSize")
	ThemeManager:SetValue(Display:GetUITextBox("TextBoxFontSizeValue"):GetText())
	
	ThemeManager:SelectElement("IconScale")
	ThemeManager:SetValue(Display:GetUITextBox("IconScaleValue"):GetText())
	
	ThemeManager:SelectElement("ButtonCornerRadius")
	ThemeManager:SetValue(Display:GetUITextBox("ButtonCornerRadiusValue"):GetText())
	
	ThemeManager:SelectElement("WindowCornerRadius")
	ThemeManager:SetValue(Display:GetUITextBox("WindowCornerRadiusValue"):GetText())
	
	ThemeManager:SelectElement("WindowHeaderHeight")
	ThemeManager:SetValue(Display:GetUITextBox("WindowHeaderHeightValue"):GetText())
	
	ThemeManager:SelectElement("WindowDropShadowSize")
	ThemeManager:SetValue(Display:GetUITextBox("WindowDropShadowSizeValue"):GetText())
	
	ThemeManager:SelectElement("LabelFont")
	ThemeManager:SetValue(Display:GetUITextBox("LabelFontValue"):GetText())
	
	ThemeManager:SelectElement("ButtonFont")
	ThemeManager:SetValue(Display:GetUITextBox("ButtonFontValue"):GetText())
	
	ThemeManager:SelectElement("HeadingFont")
	ThemeManager:SetValue(Display:GetUITextBox("HeadingFontValue"):GetText())
	
	ThemeManager:SelectElement("TextboxFont")
	ThemeManager:SetValue(Display:GetUITextBox("TextboxFontValue"):GetText())
	
	ThemeManager:SelectElement("TabHeadingFont")
	ThemeManager:SetValue(Display:GetUITextBox("TabHeadingFontValue"):GetText())
	
	ThemeManager:ApplyTheme()
end

function THEMEBUILDER_OnColorPicked(color)
	ThemeManager:SetValue(color)
	ThemeManager:ApplyTheme()
end

function THEMEBUILDER_DropShadow()
	ThemeManager:SelectElement("DropShadow")
end

function THEMEBUILDER_Transparent()
	ThemeManager:SelectElement("Transparent")
end

function THEMEBUILDER_BorderDark()
	ThemeManager:SelectElement("BorderDark")
end

function THEMEBUILDER_BorderLight()
	ThemeManager:SelectElement("BorderLight")
end

function THEMEBUILDER_BorderMedium()
	ThemeManager:SelectElement("BorderMedium")
end

function THEMEBUILDER_Text()
	ThemeManager:SelectElement("Text")
end

function THEMEBUILDER_TextDisabled()
	ThemeManager:SelectElement("TextDisbled")
end

function THEMEBUILDER_TextShadow()
	ThemeManager:SelectElement("TextShadow")
end

function THEMEBUILDER_Icon()
	ThemeManager:SelectElement("Icon")
end

function THEMEBUILDER_ButtonGradientTopFocused()
	ThemeManager:SelectElement("ButtonGradientTopFocused")
end

function THEMEBUILDER_ButtonGradientBottomFocused()
	ThemeManager:SelectElement("ButtonGradientBottomFocused")
end

function THEMEBUILDER_ButtonGradientTopUnfocused()
	ThemeManager:SelectElement("ButtonGradientTopUnfocused")
end

function THEMEBUILDER_ButtonGradientBottomUnfocused()
	ThemeManager:SelectElement("ButtonGradientBottomUnfocused")
end

function THEMEBUILDER_ButtonGradientTopPushed()
	ThemeManager:SelectElement("ButtonGradientTopPushed")
end

function THEMEBUILDER_ButtonGradientBottomPushed()
	ThemeManager:SelectElement("ButtonGradientBottomPushed")
end

function THEMEBUILDER_WindowFillFocused()
	ThemeManager:SelectElement("WindowFillFocused")
end

function THEMEBUILDER_WindowFillUnfocused()
	ThemeManager:SelectElement("WindowFillUnfocused")
end

function THEMEBUILDER_WindowTitleFocused()
	ThemeManager:SelectElement("WindowTitleFocused")
end

function THEMEBUILDER_WindowTitleUnfocused()
	ThemeManager:SelectElement("WindowTitleUnfocused")
end

function THEMEBUILDER_WindowHeaderGradientTop()
	ThemeManager:SelectElement("WindowHeaderGradientTop")
end

function THEMEBUILDER_WindowHeaderGradientBottom()
	ThemeManager:SelectElement("WindowHeaderGradientBottom")
end

function THEMEBUILDER_WindowHeaderSepTop()
	ThemeManager:SelectElement("WindowHeaderSepTop")
end

function THEMEBUILDER_WindowHeaderSepBottom()
	ThemeManager:SelectElement("WindowHeaderSepBottom")
end

function THEMEBUILDER_WindowPopup()
	ThemeManager:SelectElement("WindowPopup")
end

function THEMEBUILDER_WindowPopupTransparent()
	ThemeManager:SelectElement("WindowPopupTransparent")
end

function THEMEBUILDER_SaveTheme()
   ThemeManager:SaveTheme()
end

function THEMEBUILDER_LoadTheme()
	ThemeManager:LoadTheme()
end

function THEMEBUILDER_CancelTheme()
   StateMachine:ChangeState("MAIN")
end

function THEMEBUILDER_Exit()
   print("THEMEBUILDER_Exit")
end